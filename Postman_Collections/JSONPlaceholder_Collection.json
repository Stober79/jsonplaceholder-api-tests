{
	"info": {
		"_postman_id": "c8704a53-2cd1-480a-8c66-f6d8afc383b7",
		"name": "JSONPlaceholder API Test Suite",
		"description": "Test suite for jsonplaceholder.typicode.com public API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34389510"
	},
	"item": [
		{
			"name": "Positive tests",
			"item": [
				{
					"name": "GET all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Response is an array', () => pm.expect(json).to.be.an('array'));",
									"pm.test('Array has more than 50 items', () => pm.expect(json.length).to.be.above(50));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET single post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Post ID is 1', () => pm.expect(json.id).to.eql(1));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET posts by userId=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('All posts belong to userId=1', () => json.forEach(p => pm.expect(p.userId).to.eql(1)));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts?userId=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET all comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Response is array of comments', () => pm.expect(json).to.be.an('array'));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET comment by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Comment has postId', () => pm.expect(json).to.have.property('postId'));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Response has 10 users', () => pm.expect(json.length).to.eql(10));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Username is Bret', () => pm.expect(json.username).to.eql('Bret'));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Todos are returned', () => pm.expect(json.length).to.be.above(50));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET albums",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Albums returned', () => pm.expect(json.length).to.be.above(10));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/albums",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test('Photos returned', () => pm.expect(json.length).to.be.above(100));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/photos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"photos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative tests",
			"item": [
				{
					"name": "GET post with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 404 or empty object', () => {",
									"    let code = pm.response.code;",
									"    pm.expect([200, 404]).to.include(code);",
									"    if (code === 200) {",
									"        let json = pm.response.json();",
									"        pm.expect(Object.keys(json).length).to.eql(0);",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 404', () => pm.response.to.have.status(404));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST to /posts without body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Response received', () => pm.expect(pm.response).to.not.be.null);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200 or 204', () => pm.expect([200, 204]).to.include(pm.response.code));"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT post with invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200 or 404\", () => {\r",
									"    pm.expect([200, 404]).to.include(pm.response.code);\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json.title).to.be.eql('updated')\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"id\": 9999, \"title\": \"updated\" }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com"
		}
	]
}